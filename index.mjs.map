{"version":3,"file":"index.mjs","sources":["../node_modules/readable-stream/lib/_stream_readable.js","../node_modules/readable-stream/lib/_stream_writable.js","../node_modules/process-nextick-args/index.js","../node_modules/core-util-is/lib/util.js","../node_modules/readable-stream/lib/_stream_duplex.js","../node_modules/readable-stream/lib/_stream_transform.js","../node_modules/readable-stream/readable-browser.js","../node_modules/readable-stream/lib/_stream_passthrough.js","../node/inspect/lib/main.js","../node/inspect/lib/validate.js","../node/inspect/lib/debug.js","../node/inspect/lib/index.js","../node/inspect/lib/object_mode.js","../node/inspect/lib/factory.js","../node/debug/lib/namespace.js","../node/debug/lib/main.js","../node/debug/lib/debug.js","../node/debug/lib/validate.js","../node/debug/lib/logger.js","../node/inspect-sink/lib/main.js","../node/inspect-sink/lib/validate.js","../node/inspect-sink/lib/debug.js","../node/inspect-sink/lib/index.js","../node/inspect-sink/lib/object_mode.js","../node/inspect-sink/lib/factory.js","../node/debug-sink/lib/namespace.js","../node/debug-sink/lib/logger.js","../node/debug-sink/lib/main.js","../node/debug-sink/lib/debug.js","../node/debug-sink/lib/validate.js","../node/empty/lib/main.js","../node/empty/lib/validate.js","../node/empty/lib/debug.js","../node/from-array/lib/main.js","../node/from-array/lib/validate.js","../node/from-array/lib/debug.js","../node/from-circular-array/lib/main.js","../node/from-circular-array/lib/validate.js","../node/from-circular-array/lib/debug.js","../node/from-constant/lib/main.js","../node/from-constant/lib/validate.js","../node/from-constant/lib/debug.js","../node/from-iterator/lib/main.js","../node/from-iterator/lib/validate.js","../node/from-iterator/lib/debug.js","../node/from-strided-array/lib/main.js","../node/from-strided-array/lib/validate.js","../node/from-strided-array/lib/debug.js","../node/join/lib/main.js","../node/join/lib/validate.js","../node/join/lib/debug.js","../node/split/lib/main.js","../node/split/lib/validate.js","../node/split/lib/debug.js","../node/split/lib/decode.js","../node/stderr/lib/stderr.js","../node/stdin/lib/stdin.js","../node/stdout/lib/stdout.js","../node/transform/lib/validate.js","../node/transform/lib/destroy.js","../node/transform/lib/_transform.js","../node/transform/lib/main.js","../node/transform/lib/factory.js","../node/lib/index.js","../node/debug/lib/index.js","../node/debug/lib/object_mode.js","../node/debug/lib/factory.js","../node/debug-sink/lib/index.js","../node/debug-sink/lib/object_mode.js","../node/debug-sink/lib/factory.js","../node/empty/lib/index.js","../node/empty/lib/object_mode.js","../node/empty/lib/factory.js","../node/from-array/lib/index.js","../node/from-array/lib/object_mode.js","../node/from-array/lib/factory.js","../node/from-circular-array/lib/index.js","../node/from-circular-array/lib/object_mode.js","../node/from-circular-array/lib/factory.js","../node/from-constant/lib/index.js","../node/from-constant/lib/object_mode.js","../node/from-constant/lib/factory.js","../node/from-iterator/lib/index.js","../node/from-iterator/lib/object_mode.js","../node/from-iterator/lib/factory.js","../node/from-strided-array/lib/index.js","../node/from-strided-array/lib/object_mode.js","../node/from-strided-array/lib/factory.js","../node/join/lib/index.js","../node/join/lib/object_mode.js","../node/join/lib/factory.js","../node/split/lib/index.js","../node/split/lib/object_mode.js","../node/split/lib/factory.js","../node/stderr/lib/index.js","../node/stdin/lib/index.js","../node/stdout/lib/index.js","../node/transform/lib/index.js","../node/transform/lib/object_mode.js","../node/transform/lib/ctor.js","../lib/index.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('buffer').Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Transform = require( 'readable-stream' ).Transform;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar copy = require( '@stdlib/utils/copy' );\nvar format = require( '@stdlib/string/format' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tthis._inspect.call( null, chunk, this._idx );\n\tthis.push( chunk );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after performing flush tasks\n*/\nfunction flush( clbk ) {\n\tdebug( 'Flushing the stream...' );\n\tclbk();\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {InspectStream} stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Inspect stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = new InspectStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*/\nfunction InspectStream( options, clbk ) {\n\tvar inspect;\n\tvar opts;\n\tvar err;\n\tif ( !(this instanceof InspectStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new InspectStream( options, clbk );\n\t\t}\n\t\treturn new InspectStream( options );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tinspect = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tinspect = options;\n\t}\n\tif ( !isFunction( inspect ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', inspect ) );\n\t}\n\t// The stream's writable state should always be in object mode to prevent incoming data from being buffered (concatenated) and thus lose separation...\n\topts.writableObjectMode = true;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Initialize a chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\t// Cache a reference to the inspect callback:\n\tsetNonEnumerableReadOnly( this, '_inspect', inspect );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( InspectStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof InspectStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( InspectStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof InspectStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after performing flush tasks\n*/\nsetNonEnumerableReadOnly( InspectStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof InspectStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {InspectStream} stream instance\n*/\nsetNonEnumerableReadOnly( InspectStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = InspectStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode] - specifies whether the readable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'readableObjectMode' ) ) {\n\t\topts.readableObjectMode = options.readableObjectMode;\n\t\tif ( !isBoolean( opts.readableObjectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readableObjectMode', opts.readableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'inspect-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which inspects streamed data.\n*\n* @module @stdlib/streams/node/inspect\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n*     // => index: 0\\na\\nindex: 1\\nb\\nindex: 2\\nc\\n\n* }\n*\n* var stream = inspectStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n*     // => index: 0\\n{'value': 'a'}\\nindex: 1\\n{'value': 'b'}\\nindex: 2\\n{'value': 'c'}\\n\n* }\n*\n* var stream = inspectStream.objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = inspectStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an inspect stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: {'value': 'a'}\n* // prints: index: 1\n* // prints: {'value': 'b'}\n* // prints: index: 2\n* // prints: {'value': 'c'}\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t} else {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable inspect stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} inspect stream factory\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn inspectStream;\n\n\t/**\n\t* Creates a transform stream for inspecting streamed data.\n\t*\n\t* @private\n\t* @param {Callback} clbk - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a callback function\n\t* @returns {InspectStream} inspect stream\n\t*/\n\tfunction inspectStream( clbk ) {\n\t\treturn new Stream( opts, clbk );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = 'debug-stream';\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar InspectStream = require( './../../../node/inspect' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar debug = require( './debug.js' );\nvar DEFAULTS = require( './defaults.json' );\nvar NAMESPACE = require( './namespace.js' );\nvar validate = require( './validate.js' );\nvar logger = require( './logger.js' );\n\n\n// MAIN //\n\n/**\n* Debug stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must a valid callback argument\n* @returns {DebugStream} debug stream\n*\n* @example\n* var stream = new DebugStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*/\nfunction DebugStream( options, clbk ) {\n\tvar opts;\n\tvar name;\n\tvar log;\n\tvar err;\n\tvar cb;\n\tif ( !(this instanceof DebugStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new DebugStream( options, clbk );\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn new DebugStream( options );\n\t\t}\n\t\treturn new DebugStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tcb = clbk;\n\t\terr = validate( opts, options );\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\tcb = options;\n\t\t} else {\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.name ) {\n\t\tname = NAMESPACE + ':' + opts.name;\n\t} else {\n\t\tname = NAMESPACE;\n\t}\n\tlog = logger( name );\n\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tInspectStream.call( this, opts, inspect );\n\n\treturn this;\n\n\t/**\n\t* Callback invoked upon receiving a new chunk.\n\t*\n\t* @private\n\t* @param {*} chunk - received chunk\n\t* @param {NonNegativeInteger} idx - chunk index\n\t* @returns {void}\n\t*/\n\tfunction inspect( chunk, idx ) {\n\t\tif ( cb ) {\n\t\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk.toString(), idx );\n\t\t\treturn cb( log, chunk, idx );\n\t\t}\n\t\tif ( isBuffer( chunk ) ) {\n\t\t\tchunk = chunk.toString();\n\t\t}\n\t\tchunk = JSON.stringify( chunk );\n\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk, idx );\n\t\tlog( 'Chunk: %s. Index: %d.', chunk, idx );\n\t}\n}\n\n/*\n* Inherit from the `InspectStream` prototype.\n*/\ninherit( DebugStream, InspectStream );\n\n\n// EXPORTS //\n\nmodule.exports = DebugStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar NAMESPACE = require( './namespace.js' );\n\n\n// MAIN //\n\nvar debug = logger( NAMESPACE );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode] - specifies whether the readable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'name', opts.name ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'readableObjectMode' ) ) {\n\t\topts.readableObjectMode = options.readableObjectMode;\n\t\tif ( !isBoolean( opts.readableObjectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readableObjectMode', opts.readableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar debug = require( 'debug' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Writable = require( 'readable-stream' ).Writable;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n* @returns {void}\n*/\nfunction write( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tthis._inspect.call( null, chunk, this._idx );\n\n\t// Once destroyed, ensure we do not block the event-loop when an upstream stream pipeline is behaving synchronously (otherwise, by continuing to process stream data synchronously, we'll continue receiving data and the stream will never be destroyed)...\n\tif ( this._destroyed ) {\n\t\treturn nextTick( clbk );\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Inspect stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = new InspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*/\nfunction InspectSinkStream( options, clbk ) {\n\tvar inspect;\n\tvar opts;\n\tvar err;\n\tif ( !(this instanceof InspectSinkStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new InspectSinkStream( options, clbk );\n\t\t}\n\t\treturn new InspectSinkStream( options );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tinspect = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tinspect = options;\n\t}\n\tif ( !isFunction( inspect ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', inspect ) );\n\t}\n\t// Make the stream a Writable stream:\n\tdebug( 'Creating a writable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tWritable.call( this, opts );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Initialize a chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\t// Cache a reference to the inspect callback:\n\tsetNonEnumerableReadOnly( this, '_inspect', inspect );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Writable` prototype.\n*/\ninherit( InspectSinkStream, Writable );\n\n/**\n* Implements the `_write` method.\n*\n* @private\n* @name _write\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after processing the streamed chunk\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, '_write', write );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof InspectSinkStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {InspectSinkStream} stream instance\n*/\nsetNonEnumerableReadOnly( InspectSinkStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = InspectSinkStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding] - default encoding when not explicitly specified when writing data\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'decodeStrings' ) ) {\n\t\topts.decodeStrings = options.decodeStrings;\n\t\tif ( !isBoolean( opts.decodeStrings ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decodeStrings', opts.decodeStrings ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'defaultEncoding' ) ) {\n\t\topts.defaultEncoding = options.defaultEncoding;\n\t\tif ( !isString( opts.defaultEncoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'defaultEncoding', opts.defaultEncoding ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'inspect-stream-sink' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Writable stream which inspects streamed data.\n*\n* @module @stdlib/streams/node/inspect-sink\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream( log );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: a\n* // prints: index: 1\n* // prints: b\n* // prints: index: 2\n* // prints: c\n*\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = inspectSinkStream.objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: index: 0\n* // prints: {'value': 'a'}\n* // prints: index: 1\n* // prints: {'value': 'b'}\n* // prints: index: 2\n* // prints: {'value': 'c'}\n*\n* @example\n* var inspectSinkStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = inspectSinkStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an inspect stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} clbk - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a callback function\n* @returns {InspectSinkStream} inspect stream\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var stream = objectMode( log );\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n*\n* stream.end();\n*\n* // prints: 'index: 0'\n* // prints: {'value': 'a'}\n* // prints: 'index: 1'\n* // prints: {'value': 'b'}\n* // prints: 'index: 2'\n* // prints: {'value': 'c'}\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t} else {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable inspect stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @throws {TypeError} options argument must be an object\n* @returns {Function} inspect stream factory\n*\n* @example\n* function log( chunk, idx ) {\n*     console.log( 'index: %d', idx );\n*     console.log( chunk );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( log ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn inspectStream;\n\n\t/**\n\t* Creates a writable stream for inspecting streamed data.\n\t*\n\t* @private\n\t* @param {Callback} clbk - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a callback function\n\t* @returns {InspectStream} inspect stream\n\t*/\n\tfunction inspectStream( clbk ) {\n\t\treturn new Stream( opts, clbk );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = 'debug-stream-sink';\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar debug = require( 'debug' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar InspectSinkStream = require( './../../../node/inspect-sink' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar debug = require( './debug.js' );\nvar DEFAULTS = require( './defaults.json' );\nvar NAMESPACE = require( './namespace.js' );\nvar validate = require( './validate.js' );\nvar logger = require( './logger.js' );\n\n\n// MAIN //\n\n/**\n* Debug stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must a valid callback argument\n* @returns {DebugSinkStream} debug stream\n*\n* @example\n* var stream = new DebugSinkStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*/\nfunction DebugSinkStream( options, clbk ) {\n\tvar opts;\n\tvar name;\n\tvar log;\n\tvar err;\n\tvar cb;\n\tif ( !(this instanceof DebugSinkStream) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new DebugSinkStream( options, clbk );\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\treturn new DebugSinkStream( options );\n\t\t}\n\t\treturn new DebugSinkStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tcb = clbk;\n\t\terr = validate( opts, options );\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\tcb = options;\n\t\t} else {\n\t\t\terr = validate( opts, options );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( opts.name ) {\n\t\tname = NAMESPACE + ':' + opts.name;\n\t} else {\n\t\tname = NAMESPACE;\n\t}\n\tlog = logger( name );\n\n\tdebug( 'Creating a writable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tInspectSinkStream.call( this, opts, inspect );\n\n\treturn this;\n\n\t/**\n\t* Callback invoked upon receiving a new chunk.\n\t*\n\t* @private\n\t* @param {*} chunk - received chunk\n\t* @param {NonNegativeInteger} idx - chunk index\n\t* @returns {void}\n\t*/\n\tfunction inspect( chunk, idx ) {\n\t\tif ( cb ) {\n\t\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk.toString(), idx );\n\t\t\treturn cb( log, chunk, idx );\n\t\t}\n\t\tif ( isBuffer( chunk ) ) {\n\t\t\tchunk = chunk.toString();\n\t\t}\n\t\tchunk = JSON.stringify( chunk );\n\t\tdebug( 'Received a new chunk. Chunk: %s. Index: %d.', chunk, idx );\n\t\tlog( 'Chunk: %s. Index: %d.', chunk, idx );\n\t}\n}\n\n/*\n* Inherit from the `InspectSinkStream` prototype.\n*/\ninherit( DebugSinkStream, InspectSinkStream );\n\n\n// EXPORTS //\n\nmodule.exports = DebugSinkStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar NAMESPACE = require( './namespace.js' );\n\n\n// MAIN //\n\nvar debug = logger( NAMESPACE );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.name] - debug namespace\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding] - default encoding when not explicitly specified when writing data\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'name', opts.name ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'decodeStrings' ) ) {\n\t\topts.decodeStrings = options.decodeStrings;\n\t\tif ( !isBoolean( opts.decodeStrings ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decodeStrings', opts.decodeStrings ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'defaultEncoding' ) ) {\n\t\topts.defaultEncoding = options.defaultEncoding;\n\t\tif ( !isString( opts.defaultEncoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'defaultEncoding', opts.defaultEncoding ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tthis.push( null );\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {EmptyStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for creating an \"empty\" stream.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {EmptyStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var stream = new EmptyStream();\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction EmptyStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof EmptyStream ) ) {\n\t\tif ( arguments.length > 0 ) {\n\t\t\treturn new EmptyStream( options );\n\t\t}\n\t\treturn new EmptyStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 0 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( EmptyStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof EmptyStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( EmptyStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof EmptyStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {EmptyStream} Stream instance\n*/\nsetNonEnumerableReadOnly( EmptyStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = EmptyStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'empty-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar Buffer = require( '@stdlib/buffer/ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\terr = null;\n\n\t\tthis._i += 1;\n\t\tif ( this._i > this._src.length ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = this._src[ this._idx ];\n\t\tdebug( 'Value: %s. Idx: %d. Iter: %d.', JSON.stringify( v ), this._idx, this._i );\n\n\t\tthis._idx += this._stride;\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\tthis.emit( 'error', err );\n\t\t} else {\n\t\t\tFLG = this.push( v );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {ArrayStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an array-like object.\n*\n* @constructor\n* @param {Collection} src - source array-like object\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @param {integer} [options.dir=1] - iteration direction\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = new ArrayStream( arr );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction ArrayStream( src, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof ArrayStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ArrayStream( src, options );\n\t\t}\n\t\treturn new ArrayStream( src );\n\t}\n\tif ( !isCollection( src ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', src ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the data source:\n\tsetNonEnumerableReadOnly( this, '_src', src );\n\n\t// Cache the array \"stride\":\n\tsetNonEnumerableReadOnly( this, '_stride', opts.dir );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Initialize the source index (pointer):\n\tsetNonEnumerable( this, '_idx', ( opts.dir === 1 ) ? 0 : src.length-1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( ArrayStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof ArrayStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( ArrayStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof ArrayStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {ArrayStream} Stream instance\n*/\nsetNonEnumerableReadOnly( ArrayStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = ArrayStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {Function} [options.serialize] - custom serialization function\n* @param {integer} [options.dir] - iteration direction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( opts.dir !== 1 && opts.dir !== -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either `1` or `-1`. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-array-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar Buffer = require( '@stdlib/buffer/ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\terr = null;\n\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter || this._src.length === 0 ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tthis._idx += this._stride;\n\t\tif ( this._stride > 0 && this._idx >= this._src.length ) {\n\t\t\tthis._idx %= this._src.length;\n\t\t} else if ( this._stride < 0 && this._idx < 0 ) {\n\t\t\tthis._idx += this._src.length;\n\t\t}\n\t\tv = this._src[ this._idx ];\n\t\tdebug( 'Value: %s. Idx: %d. Iter: %d.', JSON.stringify( v ), this._idx, this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\tthis.emit( 'error', err );\n\t\t} else {\n\t\t\tFLG = this.push( v );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {CircularArrayStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an array-like object which repeatedly iterates over a provided value's elements.\n*\n* @constructor\n* @param {Collection} src - source array-like object\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @param {integer} [options.dir=1] - iteration direction\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {CircularArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'iter': arr.length * 2\n* };\n*\n* var stream = new CircularArrayStream( arr, opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction CircularArrayStream( src, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof CircularArrayStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new CircularArrayStream( src, options );\n\t\t}\n\t\treturn new CircularArrayStream( src );\n\t}\n\tif ( !isCollection( src ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', src ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the data source:\n\tsetNonEnumerableReadOnly( this, '_src', src );\n\n\t// Cache the array \"stride\":\n\tsetNonEnumerableReadOnly( this, '_stride', opts.dir );\n\n\t// Cache the number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\t// Initialize the source index (pointer):\n\tsetNonEnumerable( this, '_idx', ( opts.dir === 1 ) ? -1 : src.length );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( CircularArrayStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof CircularArrayStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( CircularArrayStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof CircularArrayStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {CircularArrayStream} Stream instance\n*/\nsetNonEnumerableReadOnly( CircularArrayStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = CircularArrayStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {Function} [options.serialize] - custom serialization function\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @param {integer} [options.dir] - iteration direction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( opts.dir !== 1 && opts.dir !== -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either `1` or `-1`. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-circular-array-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert/is-error' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar isUint8Array = require( '@stdlib/assert/is-uint8array' );\nvar arraybuffer2buffer = require( '@stdlib/buffer/from-arraybuffer' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar Buffer = require( '@stdlib/buffer/ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar copy = require( '@stdlib/utils/copy' );\nvar format = require( '@stdlib/string/format' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tdebug( 'Value: %s. Iter: %d.', this._value, this._i );\n\t\tif ( this._objectMode === false && this._i > 1 ) {\n\t\t\tFLG = this.push( Buffer.concat( [ this._sep, this._value ] ) );\n\t\t} else {\n\t\t\tFLG = this.push( this._value );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream which always streams the same value.\n*\n* @constructor\n* @param {(string|Buffer|Uint8Array)} value - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} in binary mode, value to stream must be a string, `Buffer`, or `Uint8Array`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new ConstantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction ConstantStream( value, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof ConstantStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ConstantStream( value, options );\n\t\t}\n\t\treturn new ConstantStream( value );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.objectMode === false ) {\n\t\tif ( isString( value ) ) {\n\t\t\tvalue = string2buffer( value );\n\t\t} else if ( isBuffer( value ) ) { // NOTE: order matters here. We want the `isBuffer` check BEFORE the `isUint8Array` check!!\n\t\t\t// Nothing to do, as value is already a buffer...\n\t\t} else if ( isUint8Array( value ) ) {\n\t\t\t// Convert to a `Buffer` object to provide backward compatibility with older Node.js versions...\n\t\t\tvalue = arraybuffer2buffer( value.buffer, value.byteOffset, value.length ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. In binary mode, a provided value must be a string, Buffer, or Uint8Array. Value: `%s`.', value ) );\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', string2buffer( opts.sep ) );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the value to stream:\n\tsetNonEnumerableReadOnly( this, '_value', value );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( ConstantStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = ConstantStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-constant-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar Buffer = require( '@stdlib/buffer/ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar format = require( '@stdlib/string/format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tv = this._iterator.next();\n\t\tthis._i += 1;\n\t\tif ( v.done ) {\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tv = v.value;\n\t\t\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\t\t\t\tif ( this._objectMode === false ) {\n\t\t\t\t\tv = this._serialize( v );\n\t\t\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\t\t\tif ( this._i === 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\t\t\tif ( this._i > 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] ); // eslint-disable-line max-len\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\t\t\tthis.emit( 'error', err );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = v.value;\n\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\tthis.emit( 'error', err );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( v );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an iterator.\n*\n* @constructor\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randu = require( '@stdlib/random/iter/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new IteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction IteratorStream( iterator, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof IteratorStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new IteratorStream( iterator, options );\n\t\t}\n\t\treturn new IteratorStream( iterator );\n\t}\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the iterator:\n\tsetNonEnumerableReadOnly( this, '_iterator', iterator );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( IteratorStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = IteratorStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing iteration\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-iterator-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar Buffer = require( '@stdlib/buffer/ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar format = require( '@stdlib/string/format' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\terr = null;\n\n\t\tthis._i += 1;\n\t\tif ( this._i > this._N ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = this._buffer[ this._idx ];\n\t\tdebug( 'Value: %s. Idx: %d. Iter: %d.', JSON.stringify( v ), this._idx, this._i );\n\n\t\tthis._idx += this._stride;\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t}\n\t\t}\n\t\tif ( err ) {\n\t\t\tthis.emit( 'error', err );\n\t\t} else {\n\t\t\tFLG = this.push( v );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {StridedArrayStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an array-like object.\n*\n* @constructor\n* @param {NonNegativeInteger} N - number of values to stream\n* @param {Collection} buffer - source value\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} linear index cannot exceed array bounds\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {StridedArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = new StridedArrayStream( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction StridedArrayStream( N, buffer, stride, offset, options ) {\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !( this instanceof StridedArrayStream ) ) {\n\t\tif ( arguments.length > 4 ) {\n\t\t\treturn new StridedArrayStream( N, buffer, stride, offset, options );\n\t\t}\n\t\treturn new StridedArrayStream( N, buffer, stride, offset );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t}\n\tif ( !isCollection( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', buffer ) );\n\t}\n\tif ( !isInteger( stride ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', stride ) );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%s`.', offset ) );\n\t}\n\tif ( N > 0 ) {\n\t\ti = offset + ((N-1)*stride);\n\t\tif ( offset >= buffer.length || i < 0 || i >= buffer.length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Strided array parameters are incompatible with the provided array-like object. Linear index exceeds array bounds.' );\n\t\t}\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 4 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the data source:\n\tsetNonEnumerableReadOnly( this, '_buffer', buffer );\n\n\t// Cache the strided array parameters:\n\tsetNonEnumerableReadOnly( this, '_N', N );\n\tsetNonEnumerableReadOnly( this, '_stride', stride );\n\tsetNonEnumerableReadOnly( this, '_offset', offset );\n\tsetNonEnumerable( this, '_idx', offset );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( StridedArrayStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof StridedArrayStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( StridedArrayStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof StridedArrayStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {StridedArrayStream} Stream instance\n*/\nsetNonEnumerableReadOnly( StridedArrayStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = StridedArrayStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-strided-array-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Transform = require( 'readable-stream' ).Transform;\nvar string2buffer = require( '@stdlib/buffer/from-string' );\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar Buffer = require( '@stdlib/buffer/ctor' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar len;\n\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tif ( this._encoding === 'utf8' ) {\n\t\tif ( this._init ) {\n\t\t\tchunk = this._sep + chunk;\n\t\t} else {\n\t\t\tthis._init = true;\n\t\t}\n\t} else if ( this._init ) {\n\t\tchunk = new Buffer( chunk, encoding ); // eslint-disable-line no-buffer-constructor\n\t\tlen = this._sep.length + chunk.length;\n\t\tchunk = Buffer.concat( [ this._sep, chunk ], len ); // TODO: replace with stdlib pkg\n\t\tchunk = chunk.toString( this._encoding );\n\t} else {\n\t\tthis._init = true;\n\t}\n\tthis.push( chunk, this._encoding );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after performing flush tasks\n*/\nfunction flush( clbk ) {\n\tdebug( 'Flushing the stream...' );\n\tclbk(); // TODO: consider supporting an option to append a final separator\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {JoinStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Join stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {JoinStream} join stream\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk );\n* }\n*\n* var stream = new JoinStream();\n*\n* stream.pipe( inspectStream( log )  );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n*\n* // prints: '1\\n2\\n3'\n*/\nfunction JoinStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof JoinStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new JoinStream( options );\n\t\t}\n\t\treturn new JoinStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// The stream's writable state should always be in object mode to prevent incoming data from being buffered (concatenated) and thus lose separation...\n\topts.writableObjectMode = true;\n\n\t// The stream converts each chunk into a string so no need to encode strings written to the join stream as Buffer objects:\n\topts.decodeStrings = false;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache the encoding:\n\tsetNonEnumerableReadOnly( this, '_encoding', ( opts.encoding === null ) ? 'utf8' : opts.encoding );\n\n\t// Cache the separator:\n\tif ( this._encoding !== 'utf8' ) {\n\t\topts.sep = string2buffer( opts.sep, this._encoding );\n\t}\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Flag indicating if the stream has received streamed data:\n\tsetNonEnumerable( this, '_init', false );\n\n\t// Chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( JoinStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof JoinStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( JoinStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof JoinStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after performing flush tasks\n*/\nsetNonEnumerableReadOnly( JoinStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof JoinStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {JoinStream} Stream instance\n*/\nsetNonEnumerableReadOnly( JoinStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = JoinStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode] - specifies whether the readable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '\\t',\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'readableObjectMode' ) ) {\n\t\topts.readableObjectMode = options.readableObjectMode;\n\t\tif ( !isBoolean( opts.readableObjectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readableObjectMode', opts.readableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'join-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Transform = require( 'readable-stream' ).Transform;\nvar copy = require( '@stdlib/utils/copy' );\nvar inherit = require( '@stdlib/utils/inherit' );\nvar setNonEnumerable = require( '@stdlib/utils/define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar Buffer = require( '@stdlib/buffer/ctor' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\nvar decode = require( './decode.js' );\n\n\n// VARIABLES //\n\nvar RE = /\\r?\\n/;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar splits;\n\tvar split;\n\tvar len;\n\tvar i;\n\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tif ( encoding === 'buffer' ) {\n\t\t// Default Buffer decoding is 'utf8':\n\t\tchunk = chunk.toString();\n\t}\n\telse if ( encoding !== 'utf8' ) {\n\t\t// Decode the chunk as a 'utf8' string...\n\t\tchunk = new Buffer( chunk, encoding ); // eslint-disable-line no-buffer-constructor\n\t\tchunk = chunk.toString( 'utf8' );\n\t}\n\t// Split the chunk:\n\tsplits = chunk.split( this._sep );\n\tdebug( 'Splits: %s. Index: %d.', JSON.stringify( splits ), this._idx );\n\n\t// How many splits do we have? We do not count the last \"split\", as it may be incomplete...\n\tlen = splits.length - 1;\n\tdebug( '%s splits. Index: %d.', len, this._idx );\n\n\t// If we do not have any splits, add the chunk to the buffer and wait for more data...\n\tif ( len === 0 ) {\n\t\tdebug( 'No splits. Index: %d.', this._idx );\n\t\tthis._buffer += splits[ len ];\n\t}\n\t// If we have split data, concat any previous partial split, re-decode (if need be) each split according to its original encoding, push each split to the destination, and set anything leftover as the new split buffer...\n\telse {\n\t\tdebug( 'Processing splits. Index: %d.', this._index );\n\t\tsplit = this._buffer + splits[ 0 ];\n\t\tsplit = decode( split, encoding );\n\n\t\tdebug( 'Split %d: %s. Index: %d.', 0, split.toString(), this._idx );\n\t\tthis.push( split, encoding );\n\t\tfor ( i = 1; i < len; i++ ) {\n\t\t\tsplit = decode( splits[ i ], encoding );\n\t\t\tdebug( 'Split %d: %s. Index: %d.', i, split.toString(), this._idx );\n\t\t\tthis.push( split, encoding );\n\t\t}\n\t\tdebug( 'Remaining split: %s.', splits[len].toString() );\n\t\tthis._buffer = splits[ len ];\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nfunction flush( clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar split = this._buffer;\n\tif ( split ) {\n\t\tdebug( 'Processing final split...' );\n\t\tsplit = decode( split, this._encoding );\n\t\tthis.push( split, this._encoding );\n\t}\n\tdebug( 'Flushing the stream...' );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Split stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = new SplitStream();\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n*/\nfunction SplitStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof SplitStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new SplitStream( options );\n\t\t}\n\t\treturn new SplitStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...\n\topts.readableObjectMode = true;\n\n\t// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:\n\topts.decodeStrings = false;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', ( opts.sep === null ) ? RE : opts.sep );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache the encoding:\n\tsetNonEnumerableReadOnly( this, '_encoding', opts.encoding );\n\n\t// Buffer for storing partial splits:\n\tsetNonEnumerable( this, '_buffer', '' );\n\n\t// Chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( SplitStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = SplitStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isRegExp = require( '@stdlib/assert/is-regexp' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(string|RegExp)} [options.sep] - separator used to split streamed data\n* @param {boolean} [options.objectMode] - specifies whether stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode] - specifies whether the writable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '\\t',\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif (\n\t\t\t!isString( opts.sep ) &&\n\t\t\t!isRegExp( opts.sep )\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a string or a regular expression. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'writableObjectMode' ) ) {\n\t\topts.writableObjectMode = options.writableObjectMode;\n\t\tif ( !isBoolean( opts.writableObjectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'writableObjectMode', opts.writableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'split-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar string2buffer = require( '@stdlib/buffer/from-string' );\n\n\n// MAIN //\n\n/**\n* Re-decodes a UTF-8 string according to a specified encoding.\n*\n* @private\n* @param {string} str - UTF-8 string to decode\n* @param {string} enc - string encoding\n* @returns {string} decoded string\n*/\nfunction decode( str, enc ) {\n\t// Check if we need to re-decode the string to something other than 'utf8'...\n\tif ( enc === 'utf8' || enc === 'buffer' ) {\n\t\treturn str;\n\t}\n\tstr = string2buffer( str );\n\tif ( enc ) {\n\t\treturn str.toString( enc );\n\t}\n\treturn str.toString();\n}\n\n\n// EXPORTS //\n\nmodule.exports = decode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// EXPORTS //\n\nmodule.exports = proc.stderr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// EXPORTS //\n\nmodule.exports = proc.stdin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// EXPORTS //\n\nmodule.exports = proc.stdout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk\n* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.decodeStrings] - specifies whether to decode `strings` into `Buffer` objects when writing\n* @returns {(Error|null)} null or an error object\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'transform' ) ) {\n\t\topts.transform = options.transform;\n\t\tif ( !isFunction( opts.transform ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'transform', opts.transform ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'flush' ) ) {\n\t\topts.flush = options.flush;\n\t\tif ( !isFunction( opts.flush ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'flush', opts.flush ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'decodeStrings' ) ) {\n\t\topts.decodeStrings = options.decodeStrings;\n\t\tif ( !isBoolean( opts.decodeStrings ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decodeStrings', opts.decodeStrings ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar nextTick = require( '@stdlib/utils/next-tick' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'transform-stream:destroy' );\n\n\n// MAIN //\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {Stream} stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = destroy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'transform-stream:transform' );\n\n\n// MAIN //\n\n/**\n* Implements the `_transform` method as a pass through.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s.', chunk.toString(), encoding );\n\tclbk( null, chunk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = transform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar Transform = require( 'readable-stream' ).Transform;\nvar inherit = require( '@stdlib/utils/inherit' );\nvar copy = require( '@stdlib/utils/copy' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar destroy = require( './destroy.js' );\nvar _transform = require( './_transform.js' ); // eslint-disable-line no-underscore-dangle\n\n\n// VARIABLES //\n\nvar debug = logger( 'transform-stream:main' );\n\n\n// MAIN //\n\n/**\n* Transform stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk\n* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing\n* @param {boolean} [options.objectMode=false] - specifies whether stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing\n* @throws {TypeError} must provide valid options\n* @returns {TransformStream} transform stream\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n*\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'transform': transform\n* };\n* var stream = new TransformStream( opts );\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n*\n* // prints: '1\\n2\\n3\\n'\n*/\nfunction TransformStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof TransformStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new TransformStream( options );\n\t\t}\n\t\treturn new TransformStream();\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\tthis._destroyed = false;\n\tif ( opts.transform ) {\n\t\tthis._transform = opts.transform;\n\t} else {\n\t\tthis._transform = _transform;\n\t}\n\tif ( opts.flush ) {\n\t\tthis._flush = opts.flush;\n\t}\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( TransformStream, Transform );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof TransformStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {TransformStream} stream instance\n*/\nTransformStream.prototype.destroy = destroy;\n\n\n// EXPORTS //\n\nmodule.exports = TransformStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable transform stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing\n* @throws {TypeError} options argument must be an object\n* @returns {Function} transform stream factory\n*\n* @example\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64,\n*     'decodeStrings': false\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( transform ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Creates a transform stream.\n\t*\n\t* @private\n\t* @param {Function} transform - callback to invoke upon receiving a new chunk\n\t* @param {Function} [flush] - callback to invoke after receiving all chunks and prior to the stream closing\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} transform callback must be a function\n\t* @throws {TypeError} flush callback must be a function\n\t* @returns {TransformStream} transform stream\n\t*/\n\tfunction createStream( transform, flush ) {\n\t\topts.transform = transform;\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts.flush = flush;\n\t\t} else {\n\t\t\tdelete opts.flush; // clear any previous `flush`\n\t\t}\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace streams\n*/\nvar streams = {};\n\n/**\n* @name debugStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/debug}\n*/\nsetReadOnly( streams, 'debugStream', require( './../../node/debug' ) );\n\n/**\n* @name debugSinkStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/debug-sink}\n*/\nsetReadOnly( streams, 'debugSinkStream', require( './../../node/debug-sink' ) );\n\n/**\n* @name emptyStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/empty}\n*/\nsetReadOnly( streams, 'emptyStream', require( './../../node/empty' ) );\n\n/**\n* @name arrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-array}\n*/\nsetReadOnly( streams, 'arrayStream', require( './../../node/from-array' ) );\n\n/**\n* @name circularArrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-circular-array}\n*/\nsetReadOnly( streams, 'circularArrayStream', require( './../../node/from-circular-array' ) );\n\n/**\n* @name constantStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-constant}\n*/\nsetReadOnly( streams, 'constantStream', require( './../../node/from-constant' ) );\n\n/**\n* @name iteratorStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-iterator}\n*/\nsetReadOnly( streams, 'iteratorStream', require( './../../node/from-iterator' ) );\n\n/**\n* @name stridedArrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-strided-array}\n*/\nsetReadOnly( streams, 'stridedArrayStream', require( './../../node/from-strided-array' ) );\n\n/**\n* @name inspectStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/inspect}\n*/\nsetReadOnly( streams, 'inspectStream', require( './../../node/inspect' ) );\n\n/**\n* @name inspectSinkStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/inspect-sink}\n*/\nsetReadOnly( streams, 'inspectSinkStream', require( './../../node/inspect-sink' ) );\n\n/**\n* @name joinStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/join}\n*/\nsetReadOnly( streams, 'joinStream', require( './../../node/join' ) );\n\n/**\n* @name splitStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/split}\n*/\nsetReadOnly( streams, 'splitStream', require( './../../node/split' ) );\n\n/**\n* @name stderr\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stderr}\n*/\nsetReadOnly( streams, 'stderr', require( './../../node/stderr' ) );\n\n/**\n* @name stdin\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stdin}\n*/\nsetReadOnly( streams, 'stdin', require( './../../node/stdin' ) );\n\n/**\n* @name stdout\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stdout}\n*/\nsetReadOnly( streams, 'stdout', require( './../../node/stdout' ) );\n\n/**\n* @name transformStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/transform}\n*/\nsetReadOnly( streams, 'transformStream', require( './../../node/transform' ) );\n\n\n// EXPORTS //\n\nmodule.exports = streams;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream for debugging stream pipelines.\n*\n* @module @stdlib/streams/node/debug\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var stream = debugStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var stream = debugStream.objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*\n* @example\n* var debugStream = require( '@stdlib/streams/node/debug' );\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = debugStream.factory( opts );\n*\n* // Assign each stream to a separate 'debug' namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a debug stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a valid callback argument\n* @returns {DebugStream} debug stream\n*\n* @example\n* var stream = objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\topts = {};\n\t\t\tcb = options;\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = copy( options );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\tif ( cb === void 0 ) {\n\t\treturn new Stream( opts );\n\t}\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable debug stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} debug stream factory\n*\n* @example\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Assign each stream to a separate debug namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn debugStream;\n\n\t/**\n\t* Creates a transform stream for debugging stream pipelines.\n\t*\n\t* @private\n\t* @param {string} name - debug namespace\n\t* @param {Callback} [clbk] - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a valid callback argument\n\t* @returns {DebugStream} debug stream\n\t*/\n\tfunction debugStream( name, clbk ) {\n\t\topts.name = name;\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new Stream( opts, clbk );\n\t\t}\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Writable stream for debugging stream pipelines.\n*\n* @module @stdlib/streams/node/debug-sink\n*\n* @example\n* var debugSinkStream = require( '@stdlib/streams/node/debug-sink' );\n*\n* var stream = debugSinkStream({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n* stream.end();\n*\n* @example\n* var debugSinkStream = require( '@stdlib/streams/node/debug-sink' );\n*\n* var stream = debugSinkStream.objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*\n* @example\n* var debugSinkStream = require( '@stdlib/streams/node/debug-sink' );\n*\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = debugSinkStream.factory( opts );\n*\n* // Assign each stream to a separate 'debug' namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a debug stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {string} [options.name] - debug namespace\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @param {Callback} [clbk] - callback to invoke upon receiving data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} must provide a valid callback argument\n* @returns {DebugSinkStream} debug stream\n*\n* @example\n* var stream = objectMode({\n*     'name': 'my-stream'\n* });\n*\n* stream.write( {'value': 'a'} );\n* stream.write( {'value': 'b'} );\n* stream.write( {'value': 'c'} );\n* stream.end();\n*/\nfunction objectMode( options, clbk ) {\n\tvar opts;\n\tvar cb;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t} else if ( arguments.length ) {\n\t\tif ( isFunction( options ) ) {\n\t\t\topts = {};\n\t\t\tcb = options;\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = copy( options );\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\tif ( cb === void 0 ) {\n\t\treturn new Stream( opts );\n\t}\n\treturn new Stream( opts, cb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable debug stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.decodeStrings=true] - specifies whether to encode strings as `Buffer` objects before writing data to a returned stream\n* @param {string} [options.defaultEncoding='utf8'] - default encoding when not explicitly specified when writing data\n* @throws {TypeError} options argument must be an object\n* @returns {Function} debug stream factory\n*\n* @example\n* var opts = {\n*     'objectMode': true,\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Assign each stream to a separate debug namespace...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( 'stream '+i ) );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn debugStream;\n\n\t/**\n\t* Creates a writable stream for debugging stream pipelines.\n\t*\n\t* @private\n\t* @param {string} name - debug namespace\n\t* @param {Callback} [clbk] - callback to invoke upon receiving data\n\t* @throws {TypeError} must provide valid options\n\t* @throws {TypeError} must provide a valid callback argument\n\t* @returns {DebugStream} debug stream\n\t*/\n\tfunction debugStream( name, clbk ) {\n\t\topts.name = name;\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new Stream( opts, clbk );\n\t\t}\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an \"empty\" readable stream.\n*\n* @module @stdlib/streams/node/empty\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var emptyStream = require( '@stdlib/streams/node/empty' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var stream = emptyStream();\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var emptyStream = require( '@stdlib/streams/node/empty' );\n*\n* var opts = {\n*     'objectMode': false\n* };\n*\n* var createStream = emptyStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var emptyStream = require( '@stdlib/streams/node/empty' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var stream = emptyStream.objectMode();\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar EmptyStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" empty readable stream.\n*\n* @returns {EmptyStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var stream = objectMode();\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode() {\n\tvar opts = {\n\t\t'objectMode': true\n\t};\n\treturn new EmptyStream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils/copy' );\nvar EmptyStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating \"empty\" readable streams.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'objectMode': false\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream() );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length > 0 ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns an \"empty\" readable stream.\n\t*\n\t* @private\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {EmptyStream} Stream instance\n\t*/\n\tfunction createStream() {\n\t\treturn new EmptyStream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from an array-like object.\n*\n* @module @stdlib/streams/node/from-array\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var arrayStream = require( '@stdlib/streams/node/from-array' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = arrayStream( arr );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var arrayStream = require( '@stdlib/streams/node/from-array' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = arrayStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var arrayStream = require( '@stdlib/streams/node/from-array' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = arrayStream.objectMode( arr );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar ArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an array-like object.\n*\n* @param {Collection} src - source array-like object\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {integer} [options.dir=1] - iteration direction\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = objectMode( arr );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( src, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new ArrayStream( src, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils/copy' );\nvar ArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from array-like objects.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @param {integer} [options.dir=1] - iteration direction\n* @returns {Function} stream factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an array-like object.\n\t*\n\t* @private\n\t* @param {Collection} src - source array-like object\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ArrayStream} Stream instance\n\t*/\n\tfunction createStream( src ) {\n\t\treturn new ArrayStream( src, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from an array-like object which repeatedly iterates over a provided value's elements.\n*\n* @module @stdlib/streams/node/from-circular-array\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var circularArrayStream = require( '@stdlib/streams/node/from-circular-array' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'iter': arr.length * 2\n* };\n*\n* var stream = circularArrayStream( arr, opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var circularArrayStream = require( '@stdlib/streams/node/from-circular-array' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = circularArrayStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var circularArrayStream = require( '@stdlib/streams/node/from-circular-array' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'iter': arr.length * 2\n* };\n*\n* var stream = circularArrayStream.objectMode( arr, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar CircularArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an array-like object which repeatedly iterates over a provided value's elements.\n*\n* @param {Collection} src - source array-like object\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @param {integer} [options.dir=1] - iteration direction\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {CircularArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'iter': arr.length * 2\n* };\n*\n* var stream = objectMode( arr, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( src, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new CircularArrayStream( src, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils/copy' );\nvar CircularArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from circular array-like objects.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @param {integer} [options.iter=1e308] - number of iterations\n* @param {integer} [options.dir=1] - iteration direction\n* @returns {Function} stream factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from a circular array-like object.\n\t*\n\t* @private\n\t* @param {Collection} src - source array-like object\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {CircularArrayStream} Stream instance\n\t*/\n\tfunction createStream( src ) {\n\t\treturn new CircularArrayStream( src, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream which always streams the same value.\n*\n* @module @stdlib/streams/node/from-constant\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = constantStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var constantStream = require( '@stdlib/streams/node/from-constant' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream.objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar ConstantStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream which always streams the same value.\n*\n* @param {*} value - value to stream\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( value, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new ConstantStream( value, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar copy = require( '@stdlib/utils/copy' );\nvar ConstantStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which always stream the same value.\n*\n* @param {(string|Buffer|Uint8Array|*)} [value] - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*/\nfunction factory( value, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\tvar FLG;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\topts = {};\n\t\tFLG = true;\n\t} else if ( nargs === 1 ) {\n\t\t// Check (imperfectly!) whether we were provided an \"options\" object...\n\t\tif (\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\t(\n\t\t\t\thasOwnProp( value, 'sep' ) ||\n\t\t\t\thasOwnProp( value, 'iter' ) ||\n\t\t\t\thasOwnProp( value, 'objectMode' ) ||\n\t\t\t\thasOwnProp( value, 'encoding' ) ||\n\t\t\t\thasOwnProp( value, 'highWaterMark' )\n\t\t\t)\n\t\t) {\n\t\t\topts = copy( value, 1 );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t} else { // nargs > 1\n\t\topts = copy( options, 1 );\n\t}\n\tif ( FLG ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @param {(string|Buffer|Uint8Array|*)} value - value to stream\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream1( value ) {\n\t\treturn new ConstantStream( value, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new ConstantStream( value, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from an iterator.\n*\n* @module @stdlib/streams/node/from-iterator\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iteratorStream = require( '@stdlib/streams/node/from-iterator' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iteratorStream = require( '@stdlib/streams/node/from-iterator' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = iteratorStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var randu = require( '@stdlib/random/iter/randu' );\n* var iteratorStream = require( '@stdlib/streams/node/from-iterator' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream.objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar IteratorStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an iterator.\n*\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing iteration\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( iterator, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new IteratorStream( iterator, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils/copy' );\nvar IteratorStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from iterators.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {Function} stream factory\n*\n* @example\n* var randu = require( '@stdlib/random/iter/randu' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an iterator.\n\t*\n\t* @private\n\t* @param {Iterator} iterator - source iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {IteratorStream} Stream instance\n\t*/\n\tfunction createStream( iterator ) {\n\t\treturn new IteratorStream( iterator, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from a strided array-like value.\n*\n* @module @stdlib/streams/node/from-strided-array\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = stridedArrayStream( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = stridedArrayStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr.length, arr, 1, 0 ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n* var stridedArrayStream = require( '@stdlib/streams/node/from-strided-array' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = stridedArrayStream.objectMode( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar StridedArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an array-like value.\n*\n* @param {NonNegativeInteger} N - number of values to stream\n* @param {Collection} buffer - source value\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {StridedArrayStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var stream = objectMode( arr.length, arr, 1, 0 );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( N, buffer, stride, offset, options ) {\n\tvar opts;\n\tif ( arguments.length > 4 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new StridedArrayStream( N, buffer, stride, offset, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils/copy' );\nvar StridedArrayStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from strided array-like values.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {Function} stream factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var randu = require( '@stdlib/random/base/randu' );\n*\n* var arr = new Float64Array( 10 );\n* var i;\n* for ( i = 0; i < arr.length; i++ ) {\n*     arr[ i ] = randu();\n* }\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( arr.length, arr, 1, 0 ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an array-like object.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} N - number of values to stream\n\t* @param {Collection} buffer - source array-like object\n\t* @param {integer} stride - stride length\n\t* @param {NonNegativeInteger} offset - starting index\n\t* @throws {TypeError} must provide an array-like object\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {StridedArrayStream} Stream instance\n\t*/\n\tfunction createStream( N, buffer, stride, offset ) {\n\t\treturn new StridedArrayStream( N, buffer, stride, offset, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which joins streamed data.\n*\n* @module @stdlib/streams/node/join\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var joinStream = require( '@stdlib/streams/node/join' );\n*\n* var stream = joinStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n*\n* // prints: '1\\n2\\n3'\n*\n* @example\n* var joinStream = require( '@stdlib/streams/node/join' );\n*\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = joinStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var joinStream = require( '@stdlib/streams/node/join' );\n*\n* var stream = joinStream.objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( stdout );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: 'a,b,c'\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a join stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {JoinStream} join stream\n*\n* @example\n* var inspectStream = require( '@stdlib/streams/node/inspect-sink' );\n*\n* function log( chunk ) {\n*     console.log( chunk.toString() );\n* }\n*\n* var stream = objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( inspectStream( log ) );\n*\n* stream.write( 'a' );\n* stream.write( 'b' );\n* stream.write( 'c' );\n*\n* stream.end();\n*\n* // prints: 'a,b,c'\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable join stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.readableObjectMode=false] - specifies whether the readable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} join stream factory\n*\n* @example\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn joinStream;\n\n\t/**\n\t* Creates a transform stream for joining streamed data.\n\t*\n\t* @private\n\t* @throws {TypeError} must provide valid options\n\t* @returns {JoinStream} join stream\n\t*/\n\tfunction joinStream() {\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which splits streamed data.\n*\n* @module @stdlib/streams/node/split\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var stream = splitStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n* // => '1' => '2' => '3'\n*\n* @example\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = splitStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var splitStream = require( '@stdlib/streams/node/split' );\n*\n* var stream = splitStream.objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( stdout );\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n* // => 'a' => 'b' => 'c'\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = objectMode({\n*     'sep': ','\n* });\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8'\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn splitStream;\n\n\t/**\n\t* Creates a transform stream for splitting streamed data.\n\t*\n\t* @private\n\t* @throws {TypeError} must provide valid options\n\t* @returns {SplitStream} split stream\n\t*/\n\tfunction splitStream() {\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard error.\n*\n* @module @stdlib/streams/node/stderr\n*\n* @example\n* var stdin = require( '@stdlib/streams/node/stdin' );\n* var stderr = require( '@stdlib/streams/node/stderr' );\n*\n* // Echo stream:\n* stdin.pipe( stderr );\n*/\n\n// MODULES //\n\nvar stderr = require( './stderr.js' );\n\n\n// EXPORTS //\n\nmodule.exports = stderr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard input.\n*\n* @module @stdlib/streams/node/stdin\n*\n* @example\n* var stdin = require( '@stdlib/streams/node/stdin' );\n* var stdout = require( '@stdlib/streams/node/stdout' );\n*\n* // Echo stream:\n* stdin.pipe( stdout );\n*/\n\n// MODULES //\n\nvar stdin = require( './stdin.js' );\n\n\n// EXPORTS //\n\nmodule.exports = stdin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard output.\n*\n* @module @stdlib/streams/node/stdout\n*\n* @example\n* var stdin = require( '@stdlib/streams/node/stdin' );\n* var stdout = require( '@stdlib/streams/node/stdout' );\n*\n* // Echo stream:\n* stdin.pipe( stdout );\n*/\n\n// MODULES //\n\nvar stdout = require( './stdout.js' );\n\n\n// EXPORTS //\n\nmodule.exports = stdout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream.\n*\n* @module @stdlib/streams/node/transform\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var transformStream = require( '@stdlib/streams/node/transform' );\n*\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'transform': transform\n* };\n* var stream = transformStream( opts );\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n* // => '1\\n2\\n3\\n'\n*\n*\n* @example\n* var transformStream = require( '@stdlib/streams/node/transform' );\n*\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64,\n*     'decodeStrings': false\n* };\n*\n* var factory = transformStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory( transform ) );\n* }\n*\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var transformStream = require( '@stdlib/streams/node/transform' );\n*\n* function stringify( chunk, enc, clbk ) {\n*     clbk( null, JSON.stringify( chunk ) );\n* }\n*\n* function newline( chunk, enc, clbk ) {\n*     clbk( null, chunk+'\\n' );\n* }\n*\n* var s1 = transformStream.objectMode({\n*     'transform': stringify\n* });\n*\n* var s2 = transformStream.objectMode({\n*     'transform': newline\n* });\n*\n* s1.pipe( s2 ).pipe( stdout );\n*\n* s1.write( {'value': 'a'} );\n* s1.write( {'value': 'b'} );\n* s1.write( {'value': 'c'} );\n*\n* s1.end();\n* // => '{\"value\":\"a\"}\\n{\"value\":\"b\"}\\n{\"value\":\"c\"}\\n'\n*\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n* var transformStream = require( '@stdlib/streams/node/transform' );\n*\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'transform': transform\n* };\n*\n* var Stream = transformStream.ctor( opts );\n*\n* var stream = new Stream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n* // => '1\\n2\\n3\\n'\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar transform = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\nvar ctor = require( './ctor.js' );\n\n\n// MAIN //\n\nsetReadOnly( transform, 'objectMode', objectMode );\nsetReadOnly( transform, 'factory', factory );\nsetReadOnly( transform, 'ctor', ctor );\n\n\n// EXPORTS //\n\nmodule.exports = transform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a transform stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk\n* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {TransformStream} transform stream\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n*\n* function stringify( chunk, enc, clbk ) {\n*     clbk( null, JSON.stringify( chunk ) );\n* }\n*\n* function newline( chunk, enc, clbk ) {\n*     clbk( null, chunk+'\\n' );\n* }\n*\n* var s1 = objectMode({\n*     'transform': stringify\n* });\n*\n* var s2 = objectMode({\n*     'transform': newline\n* });\n*\n* s1.pipe( s2 ).pipe( stdout );\n*\n* s1.write( {'value': 'a'} );\n* s1.write( {'value': 'b'} );\n* s1.write( {'value': 'c'} );\n*\n* s1.end();\n*\n* // prints: '{\"value\":\"a\"}\\n{\"value\":\"b\"}\\n{\"value\":\"c\"}\\n'\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = copy( options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar Transform = require( 'readable-stream' ).Transform;\nvar inherit = require( '@stdlib/utils/inherit' );\nvar copy = require( '@stdlib/utils/copy' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar destroy = require( './destroy.js' );\nvar _transform = require( './_transform.js' ); // eslint-disable-line no-underscore-dangle\n\n\n// VARIABLES //\n\nvar debug = logger( 'transform-stream:ctor' );\n\n\n// MAIN //\n\n/**\n* Transform stream constructor factory.\n*\n* @param {Options} [options] - stream options\n* @param {Function} [options.transform] - callback to invoke upon receiving a new chunk\n* @param {Function} [options.flush] - callback to invoke after receiving all chunks and prior to the stream closing\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} Transform stream constructor\n*\n* @example\n* var stdout = require( '@stdlib/streams/node/stdout' );\n*\n* function transform( chunk, enc, clbk ) {\n*     clbk( null, chunk.toString()+'\\n' );\n* }\n*\n* var opts = {\n*     'transform': transform\n* };\n*\n* var TransformStream = ctor( opts );\n*\n* var stream = new TransformStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1' );\n* stream.write( '2' );\n* stream.write( '3' );\n*\n* stream.end();\n*\n* // prints: '1\\n2\\n3\\n'\n*/\nfunction ctor( options ) {\n\tvar transform;\n\tvar copts;\n\tvar err;\n\n\tcopts = copy( DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( copts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( copts.transform ) {\n\t\ttransform = copts.transform;\n\t} else {\n\t\ttransform = _transform;\n\t}\n\t/**\n\t* Transform stream constructor.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {Options} [options] - stream options\n\t* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n\t* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n\t* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n\t* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n\t* @param {boolean} [options.decodeStrings=true] - specifies whether to decode `strings` into `Buffer` objects when writing\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {TransformStream} transform stream\n\t*\n\t* @example\n\t* var stdout = require( './../../../node/stdout' );\n\t*\n\t* var stream = new TransformStream();\n\t*\n\t* stream.pipe( stdout );\n\t*\n\t* stream.write( '1' );\n\t* stream.write( '2' );\n\t* stream.write( '3' );\n\t*\n\t* stream.end();\n\t*\n\t* // prints: '1\\n2\\n3\\n'\n\t*/\n\tfunction TransformStream( options ) {\n\t\tvar opts;\n\t\tvar err;\n\t\tif ( !( this instanceof TransformStream ) ) {\n\t\t\tif ( arguments.length ) {\n\t\t\t\treturn new TransformStream( options );\n\t\t\t}\n\t\t\treturn new TransformStream();\n\t\t}\n\t\topts = copy( copts );\n\t\tif ( arguments.length ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\t\tTransform.call( this, opts );\n\t\tthis._destroyed = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t* Inherit from the `Transform` prototype.\n\t*/\n\tinherit( TransformStream, Transform );\n\n\t/**\n\t* Implements the `_transform` method.\n\t*\n\t* @private\n\t* @name _transform\n\t* @memberof TransformStream.prototype\n\t* @type {Function}\n\t* @param {(Buffer|string)} chunk - streamed chunk\n\t* @param {string} encoding - Buffer encoding\n\t* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n\t*/\n\tTransformStream.prototype._transform = transform; // eslint-disable-line no-underscore-dangle\n\n\tif ( copts.flush ) {\n\t\t/**\n\t\t* Implements the `_flush` method.\n\t\t*\n\t\t* @private\n\t\t* @name _flush\n\t\t* @memberof TransformStream.prototype\n\t\t* @type {Function}\n\t\t* @param {Callback} callback to invoke after performing flush tasks\n\t\t*/\n\t\tTransformStream.prototype._flush = copts.flush; // eslint-disable-line no-underscore-dangle\n\t}\n\n\t/**\n\t* Gracefully destroys a stream, providing backward compatibility.\n\t*\n\t* @private\n\t* @name destroy\n\t* @memberof TransformStream.prototype\n\t* @type {Function}\n\t* @param {Object} [error] - optional error message\n\t* @returns {TransformStream} stream instance\n\t*/\n\tTransformStream.prototype.destroy = destroy;\n\n\treturn TransformStream;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name node\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/streams/node}\n*/\nimport node from './../node';\nsetReadOnly( ns, 'node', node );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["pna","require","module","exports","Readable","Duplex","isArray","ReadableState","EventEmitter","EElistenerCount","emitter","type","listeners","length","Stream","Buffer","OurUint8Array","global","Uint8Array","util","Object","create","inherits","debugUtil","debug","debuglog","StringDecoder","BufferList","destroyImpl","kProxyEvents","options","stream","isDuplex","this","objectMode","readableObjectMode","hwm","highWaterMark","readableHwm","readableHighWaterMark","defaultHwm","Math","floor","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","destroyed","defaultEncoding","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","destroy","_destroy","call","readableAddChunk","chunk","addToFront","skipChunkCheck","er","state","end","push","emitReadable","onEofChunk","obj","isBuffer","undefined","TypeError","chunkInvalid","emit","getPrototypeOf","prototype","from","_uint8ArrayToBuffer","Error","addChunk","write","maybeReadMore","needMoreData","unshift","defineProperty","get","set","value","_undestroy","undestroy","err","cb","isPaused","setEncoding","enc","howMuchToRead","n","head","data","computeNewHighWaterMark","nextTick","emitReadable_","flow","maybeReadMore_","len","nReadingNextTick","self","resume_","fromList","ret","shift","join","concat","clear","list","hasStrings","slice","p","c","next","str","nb","tail","copyFromBufferString","allocUnsafe","copy","buf","copyFromBuffer","fromListPartial","endReadable","endReadableNT","indexOf","xs","x","i","l","parseInt","nOrig","doRead","pipe","dest","pipeOpts","src","endFn","process","stdout","stderr","onend","unpipe","onunpipe","unpipeInfo","hasUnpiped","removeListener","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","_writableState","needDrain","once","on","pipeOnDrain","increasedAwaitDrain","pause","event","fn","prependListener","_events","resume","dests","index","splice","ev","res","addListener","wrap","_this","paused","method","apply","arguments","bind","enumerable","_fromList","CorkedRequest","entry","finish","corkReq","callback","pendingcb","corkedRequestsFree","onCorkedFinish","Writable","asyncWrite","browser","version","setImmediate","WritableState","internalUtil","deprecate","realHasInstance","nop","writableObjectMode","writableHwm","writableHighWaterMark","finalCalled","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writecb","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","bufferedRequestCount","writable","_write","writev","_writev","final","_final","doWrite","onwriteDrain","Array","holder","count","allBuffers","isBuf","callFinal","need","prefinish","getBuffer","current","out","_","Symbol","hasInstance","Function","object","writeAfterEnd","valid","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","toLowerCase","endWritable","arg1","arg2","arg3","args","objectToString","o","toString","arg","isBoolean","isNull","isNullOrUndefined","isNumber","isString","isSymbol","isUndefined","isRegExp","re","isObject","isDate","d","isError","e","isFunction","isPrimitive","require$$0","objectKeys","keys","key","_stream_duplex","require$$1","require$$2","require$$3","require$$4","v","allowHalfOpen","onEndNT","_stream_transform","Transform","afterTransform","ts","_transformState","transforming","writechunk","rs","needTransform","writeencoding","transform","_transform","flush","_flush","done","_this2","err2","PassThrough","_stream_passthrough","format","inherit","setNonEnumerable","require$$5","setNonEnumerableReadOnly","require$$6","require$$7","DEFAULTS","require$$8","validate","hasOwnProp","isNonNegative","validate_1","opts","require$$9","debug_1","require$$10","InspectStream","clbk","inspect","JSON","stringify","_idx","_inspect","error","_destroyed","main","setReadOnly","object_mode","factory","inspectStream","lib","namespace","NAMESPACE","name","logger","DebugStream","log","idx","InspectSinkStream","DebugSinkStream","EmptyStream","message","isCollection","string2buffer","require$$11","require$$12","sep","serialize","dir","require$$13","require$$14","ArrayStream","FLG","_i","_src","_stride","_objectMode","_serialize","_sep","isNonNegativeInteger","iter","CircularArrayStream","_iter","isUint8Array","arraybuffer2buffer","require$$15","require$$16","ConstantStream","byteOffset","_value","isIteratorLike","IteratorStream","iterator","_iterator","isInteger","StridedArrayStream","N","stride","offset","RangeError","_N","_buffer","JoinStream","_encoding","_init","decode","decode_1","RE","SplitStream","splits","split","_index","stdin","destroy_1","TransformStream","createStream","streams","debugStream","factory_1","nargs","createStream1","createStream2","joinStream","splitStream","ctor","ctor_1","copts","ns","node"],"mappings":"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"}